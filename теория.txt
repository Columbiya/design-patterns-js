все паттерны делятся на три группы


порождающие, структурные и поведенческие (creational, structural, ...)

паттерн - концепция решения (не код, логично) для решения каких то часто встречаемых задач

creational - constructor, factory, prototype, singleton
structural - adapter (позволяет внедрить в приложение новый функционал, не ломая прошлый), decorator (модификация класса, функции, чтобы дать ей новый функционал),
            facade (чтобы создавать более простой и уникальный интерфейс для взаимодействия с различными классами, позволяем упростить взаимодействия (jquery)),
            flyweight - чтобы мы могли эффективно передавать и работать с данными через различные типы объетов. Пример - загрузка изображений (кэширование, сохранение памяти) 
            flyweight - то же самое кэширование
            proxy - позволяет ставить ловушки на поля объектов, вызов функции, что позволяет гибко определять работу приложения. пример - избавление от лишних запросов на сервер,
            что в веб разработке - крайне важная задача
            а прокси неплох Proxy Reflect

behaviour - chain of responsibility ЭТО КОГДА this ВОЗВРАЩАЮТ В КЛАССЕ, ЧТОБЫ МОЖНО БЫЛО ЦЕПОЧКУ ВЫЗОВОВ СДЕЛАТЬ!! ЭТО КРУТо
            command - позволяет создавать абстрактную оболочку над функционал, которая позволяет управлять через другой объект, записывая состояние (redux)
            iterator - последовательно получать доступ до определенной информации
	    mediator - позволяет выстраивать очень плотную и тесную коммуникацию между различными объектами разного типа. При этом он предоставляет централизованную абстракцию,
которая позволяет взаимодействовать с группой объектов через другую группу. (?)
            observer - формирует зависимости 1 к многим. one to many. (dispatcher, listener, publisher-subscriber)
            state
            strategy - позволяет создавать оболочку для различных интерфейсов, чтобы мы могли разные алгоритмы и интерфейсы. Определяет семейство алгоритмов, которые наследуют
            объекты в неизменямом порядке
            template - определяет некоторый алгоритм, скелет алгоритма, но при этом делегирует создание конкретного функционала уже в дочерние классы. Определяет структуру, а
            дочерние классы реализуют конкретный функционал

singleton - существует какой то класс, в приложении может быть только один инстанс его
singleton - как в mongoose, например. Там есть один инстанс класса, через него мы работаем, с одним инстансом и одним подключениеим!

adapter - очень часто используется с API. Если есть какая то старая и новая версии API, то адаптер нам подойдет
